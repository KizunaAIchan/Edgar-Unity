(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{202:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return p})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return u}));var n=r(2),a=r(6),i=(r(0),r(254)),o={title:"Fixed input"},p={id:"version-1.0.3/pipeline-tasks/fixed-input",title:"Fixed input",description:"This pipeline task is used to setup an input for the dungeon generator from a given level graph. Prepared input is added to the payload. It is called Fixed input because the input is created through GUI and is therefore always the same. If you want to precedurally create level graphs, you have to implement your own pipeline task.",source:"@site/versioned_docs\\version-1.0.3\\pipeline-tasks\\fixed-input.md",permalink:"/ProceduralLevelGenerator-Unity/docs/1.0.3/pipeline-tasks/fixed-input",editUrl:"https://github.com/OndrejNepozitek/ProceduralLevelGenerator-Unity/tree/docusaurus/versioned_docs/version-1.0.3/pipeline-tasks/fixed-input.md",version:"1.0.3",sidebar:"version-1.0.3/docs",previous:{title:"Run pipeline",permalink:"/ProceduralLevelGenerator-Unity/docs/1.0.3/generator-pipeline/run-pipeline"},next:{title:"Graph based generator",permalink:"/ProceduralLevelGenerator-Unity/docs/1.0.3/pipeline-tasks/graph-based-generator"}},l=[],c={rightToc:l};function u(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This pipeline task is used to setup an input for the dungeon generator from a given level graph. Prepared input is added to the payload. It is called ",Object(i.b)("em",{parentName:"p"},"Fixed input")," because the input is created through GUI and is therefore always the same. If you want to precedurally create level graphs, you have to implement your own pipeline task."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Basic information:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Menu location: ",Object(i.b)("em",{parentName:"li"},"Dungeon generator/Pipeline/Fixed input")),Object(i.b)("li",{parentName:"ul"},"Implementation: ",Object(i.b)("inlineCode",{parentName:"li"},"FixedInputConfig")," and ",Object(i.b)("inlineCode",{parentName:"li"},"FixedInputTask")," classes")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Options:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Level Graph"),": level graph to be used"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Use Corridors"),": whether corridors are enabled or not",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"with corridors enabled, there must be at least one corridor room template in a given level graph")))))}u.isMDXComponent=!0},254:function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),u=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},s=function(e){var t=u(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=u(r),b=n,m=s["".concat(o,".").concat(b)]||s[b]||d[b]||i;return r?a.a.createElement(m,p(p({ref:t},c),{},{components:r})):a.a.createElement(m,p({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=b;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:n,o[1]=p;for(var c=2;c<i;c++)o[c]=r[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);