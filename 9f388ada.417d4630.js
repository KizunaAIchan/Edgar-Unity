(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{180:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return d}));var a=n(2),r=n(6),o=(n(0),n(228)),l=n(231),i=n(237),s={title:"(PRO) Dead Cells case study"},c={id:"examples/dead-cells",title:"(PRO) Dead Cells case study",description:"In this tutorial, we will look into how to generate levels similar to what we can see in Dead Cells.",source:"@site/docs\\examples\\dead-cells.md",permalink:"/ProceduralLevelGenerator-Unity/docs/next/examples/dead-cells",editUrl:"https://github.com/OndrejNepozitek/ProceduralLevelGenerator-Unity/tree/docusaurus/docs/examples/dead-cells.md",version:"next",sidebar:"docs",previous:{title:"(PRO) Enter the Gungeon case study",permalink:"/ProceduralLevelGenerator-Unity/docs/next/examples/enter-the-gungeon"},next:{title:"Room template customization",permalink:"/ProceduralLevelGenerator-Unity/docs/next/guides/room-template-customization"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Underground level",id:"underground-level",children:[{value:"Room templates",id:"room-templates",children:[]},{value:"Level graph",id:"level-graph",children:[]},{value:"Custom room and connection types",id:"custom-room-and-connection-types",children:[]},{value:"Input setup",id:"input-setup",children:[]},{value:"Spawn position",id:"spawn-position",children:[]},{value:"Enemies",id:"enemies",children:[]},{value:"Level map",id:"level-map",children:[]},{value:"Results",id:"results",children:[]}]},{value:"Rooftop level",id:"rooftop-level",children:[{value:"Towers",id:"towers",children:[]},{value:"Rooms inside towers",id:"rooms-inside-towers",children:[]},{value:"Results",id:"results-1",children:[]}]}],m={rightToc:p};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In this tutorial, we will look into how to generate levels similar to what we can see in ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://store.steampowered.com/app/588650/Dead_Cells/"}),"Dead Cells"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Disclaimer:")," We are in no way affiliated with the authors of the Dead Cells game and this plugin is not used in the game. This is only a case study about how to use this plugin to create something similar to what is done in that game.")),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/underground_result1.png",caption:"Underground level generated by our algorithm, inspired by the Prisoners Quarters level from Dead Cells",mdxType:"Image"}),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/ramparts_result1.png",caption:"Rooftop level generated by our algorithm, inspired by the Ramparts level from Dead Cells",mdxType:"Image"}),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/ramparts_ingame.png",caption:"Rooftop level generated by our algorithm, ingame view",mdxType:"Image"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," All files from this example can be found at ",Object(o.b)("em",{parentName:"p"},"ProceduralLevelGenerator/Examples/DeadCells"),".")),Object(o.b)(i.a,{id:"dead-cells",mdxType:"ExampleFeatures"}),Object(o.b)("h2",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"Dead Cells is a rogue-lite, metroidvania inspired, action-platformer. They use procedural generation techniques to generate levels of the game. An article about their approach can be found ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.indiedb.com/games/dead-cells/news/the-level-design-of-a-procedurally-generated-metroidvania"}),"here")," and a video ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.youtube.com/watch?v=tyMrRW-Li_I"}),"here"),"."),Object(o.b)("p",null,"The main idea is that they have hand-made room templates and a graph that describes the structure of the level. Both the room templates and the graph are usually different for each stage of the game. Their procedural generator is then guided by the graph of rooms and picks a random room template for each room. This approach is very similar to what we do in our algorithm."),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/original_sewers_graph.png",caption:"Graph that describes the structure of the Sewers level in Dead Cells",mdxType:"Image"}),Object(o.b)("h2",{id:"underground-level"},"Underground level"),Object(o.b)("p",null,"The first level that we will try to implement with our plugin is an underground level inspired by the Prisoners Quarters level from Dead Cells."),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/original_prisoners_quarters.png",caption:"Prisoners Quarters level map from Dead Cells",mdxType:"Image"}),Object(o.b)("h3",{id:"room-templates"},"Room templates"),Object(o.b)("p",null,"We use the default platformer tilemap layers handler to create the room templates."),Object(o.b)(l.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/underground/entrance.png",caption:"Entrance",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/underground/exit.png",caption:"Exit",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/underground/room4.png",caption:"Normal room",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/underground/shop1.png",caption:"Shop",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/underground/teleport2.png",caption:"Teleport",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/underground/treasure1.png",caption:"Treasure",mdxType:"GalleryImage"})),Object(o.b)("h4",{id:"corridors"},"Corridors"),Object(o.b)("p",null,"We use simple corridors to connect individual rooms."),Object(o.b)(l.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/underground/Hor.png",caption:"Horizontal corridor",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/underground/Ver.png",caption:"Vertical corridor",mdxType:"GalleryImage"})),Object(o.b)("p",null,"There is a slight problem with the corners of the corridor and the tileset that we use. In the image below, you can see that if the room that is connected with the corridor has a different height than the corridor, we should use a proper corner tile. We currently do not handle this situation but it could be solved by using rule tiles or by writing a post-processing logic that would find these problems and fix them."),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/corridor_problem.png",caption:"Problem with corridor corners",mdxType:"Image"}),Object(o.b)("h3",{id:"level-graph"},"Level graph"),Object(o.b)("p",null,"Our underground level is inspired by the Prisoners Quarters level in Dead Cells. The level graph below was created by analyzing the structure of several generated levels and then trying to replicate the main features. "),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/underground_level_graph.png",caption:"Level graph for the underground level",mdxType:"Image"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," It seems like the structure of the level may sligthly differ between individual runs of the game. For example, the positions of the shop room and the treasure room may be swapped. However, to keep it simple, we will use a fixed level graph. You can see the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../examples/enter-the-gungeon"}),"Enter the Gungeon")," for an example of procedurally generated levels.")),Object(o.b)("h3",{id:"custom-room-and-connection-types"},"Custom room and connection types"),Object(o.b)("p",null,"In the level graph above, we used custom room and conenction types. The implementation of the custom room type can be seen below. Each room has its type (entrance, treasure, etc) and also a flag that indicates where it is outside (which is used for rooftop levels). Additionaly, we override the ",Object(o.b)("inlineCode",{parentName:"p"},"ToString()")," implementation so that the type of the room is displayed in the level graph."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public class DeadCellsRoom : RoomBase\n{\n    public DeadCellsRoomType Type;\n\n    public bool Outside;\n\n    public override List<GameObject> GetRoomTemplates()\n    {\n        // We do not need any room templates here because they are resolved based on the type of the room.\n        return null;\n    }\n\n    public override string GetDisplayName()\n    {\n        // Use the type of the room as its display name.\n        return Type.ToString();\n    }\n}\n")),Object(o.b)("p",null,"We also have a custom connection type. It currently looks exactly like the default implementation but we use it just in case we need some additional functionality later."),Object(o.b)("h3",{id:"input-setup"},"Input setup"),Object(o.b)("p",null,"We decided to use a custom input setup to prepare our inputs. The main idea is the following. We create a level graph as we would normally do but we do not assign any room templates to it. Instead, we create a custom input task that takes a level graph as an input, together with the mapping between the type of room and the available room templates. The implementation will go through individual rooms in the level graph and based on their type it will assign corresponding room templates."),Object(o.b)("p",null,"First, we create the mapping between the type of the room and the available room templates:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"[Serializable]\npublic class DeadCellsRoomTemplatesConfig\n{\n    public GameObject[] DefaultRoomTemplates;\n\n    public GameObject[] ShopRoomTemplates;\n\n    // Additional room templates would be here\n\n    public GameObject[] GetRoomTemplates(DeadCellsRoom room)\n    {\n        switch (room.Type)\n        {\n            case DeadCellsRoomType.Shop:\n                return ShopRoomTemplates;\n\n            default:\n                return DefaultRoomTemplates;\n        }\n    }\n}\n")),Object(o.b)("p",null,"And then we create a simple input setup task that prepares the level description:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public class DeadCellsInputSetupTask : DungeonGeneratorInputBase\n{\n    public LevelGraph LevelGraph;\n\n    public DeadCellsRoomTemplatesConfig RoomTemplates;\n\n    /// <summary>\n    /// This is the main method of the input setup.\n    /// It prepares the description of the level for the procedural generator.\n    /// </summary>\n    /// <returns></returns>\n    protected override LevelDescription GetLevelDescription()\n    {\n        var levelDescription = new LevelDescription();\n\n        // Go through individual rooms and add each room to the level description\n        // Room templates are resolved based on their type\n        foreach (var room in LevelGraph.Rooms.Cast<DeadCellsRoom>())\n        {\n            levelDescription.AddRoom(room, RoomTemplates.GetRoomTemplates(room).ToList());\n        }\n\n        // Go through individual connections and for each connection create a corridor room\n        foreach (var connection in LevelGraph.Connections.Cast<DeadCellsConnection>())\n        {\n            var corridorRoom = ScriptableObject.CreateInstance<DeadCellsRoom>();\n            corridorRoom.Type = DeadCellsRoomType.Corridor;\n            levelDescription.AddCorridorConnection(connection, RoomTemplates.CorridorRoomTemplates.ToList(), corridorRoom);\n        }\n\n        return levelDescription;\n    }\n}\n")),Object(o.b)("h3",{id:"spawn-position"},"Spawn position"),Object(o.b)("p",null,"In ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../examples/example1"}),"Example 1"),", we placed the player prefab directly in the Spawn room template to make sure that the player always starts in the correct room. However, there is also a different approach to achieve the same result. Instead of placing the player prefab inside the room template, we simply create an empty GameObject that will act as a marker of the spawn position. We place the player prefab directly into the scene and implement a simple post-processing logic that finds the spawn position marker and moves the player there after the level is generated."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'private void SetSpawnPosition(GeneratedLevel level)\n{\n    // Find the room with the Entrance type\n    var entranceRoomInstance = level\n        .GetRoomInstances()\n        .FirstOrDefault(x => ((DeadCellsRoom) x.Room).Type == DeadCellsRoomType.Entrance);\n\n    if (entranceRoomInstance == null)\n    {\n        throw new InvalidOperationException("Could not find Entrance room");\n    }\n\n    var roomTemplateInstance = entranceRoomInstance.RoomTemplateInstance;\n\n    // Find the spawn position marker\n    var spawnPosition = roomTemplateInstance.transform.Find("SpawnPosition");\n\n    // Move the player to the spawn position\n    var player = GameObject.FindWithTag("Player");\n    player.transform.position = spawnPosition.position;\n}\n')),Object(o.b)("h3",{id:"enemies"},"Enemies"),Object(o.b)("p",null,"In order to spawn enemies in generated levels, we added an empty GameObject called ",Object(o.b)("em",{parentName:"p"},"EnemySpawnPositions")," to each room template where we want to spawn enemies. Each empty GameObject that we attach as a child will mark a single position where an enemy can spawn. An advantage of this approach is that we can randomize the process of choosing an enemy for each spawn point."),Object(o.b)("p",null,"We did not implement any combat, just a simple patrol AI that makes the enemy change its direction if there is a hole or an obstacle ahead."),Object(o.b)("p",null,"Below you can see a method that we can put inside a post-processing task to handle the spawn of enemies."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'public bool SpawnEnemies;\npublic GameObject[] Enemies;\n\nprivate void DoSpawnEnemies(GeneratedLevel level)\n{\n    // Check that we have at least one enemy to choose from\n    if (Enemies == null || Enemies.Length == 0)\n    {\n        throw new InvalidOperationException("There must be at least one enemy prefab to spawn enemies");\n    }\n\n    // Go through individual rooms\n    foreach (var roomInstance in level.GetRoomInstances())\n    {\n        var roomTemplate = roomInstance.RoomTemplateInstance;\n\n        // Find the game object that holds all the spawn points\n        var enemySpawnPoints = roomTemplate.transform.Find("EnemySpawnPoints");\n\n        if (enemySpawnPoints != null)\n        {\n            // Go through individual spawn points and choose a random enemy to spawn\n            foreach (Transform enemySpawnPoint in enemySpawnPoints)\n            {\n                var enemyPrefab = Enemies[Random.Next(Enemies.Length)];\n                var enemy = Instantiate(enemyPrefab);\n                enemy.transform.parent = roomTemplate.transform;\n                enemy.transform.position = enemySpawnPoint.position;\n            }\n        }\n    }\n}\n')),Object(o.b)("h3",{id:"level-map"},"Level map"),Object(o.b)("p",null,"Dead Cells comes with a schematic level map that shows the overview of the whole level with a very simple graphics. This level map also contains positions of all the teleport, treasures, etc. We decided to create something similar (although much simpler) for this tutorial. The result can be seen below:"),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/underground_result1.png",caption:"Simple level map",mdxType:"Image"}),Object(o.b)("p",null,"After a level is generated, we create an additional tilemap which will contain all the information about the level map. We go through individual tilemap layers of the level and copy them to the level map tilemap. First, we find all the tiles from the ",Object(o.b)("em",{parentName:"p"},"Background")," tilemap layer and copy them to the level map. But instead of using the normal graphics of individual tiles, we use a tile that is completely blue. Then we repeat this process with other layers and different colors of tiles."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'public TileBase LevelMapWallTile;\npublic TileBase LevelMapWallBackgroundTile;\npublic TileBase LevelMapBackgroundTile;\npublic TileBase LevelMapPlatformTile;\n\nprivate void SetupLevelMap(GeneratedLevel level)\n{\n    // Return if level map not supported\n    if (!DeadCellsGameManager.Instance.LevelMapSupported())\n    {\n        return;\n    }\n\n    // Create new tilemap layer for the level map\n    var tilemaps = level.GetSharedTilemaps();\n    var tilemapsRoot = level.RootGameObject.transform.Find(GeneratorConstants.TilemapsRootName);\n    var tilemapObject = new GameObject("LevelMap");\n    tilemapObject.transform.SetParent(tilemapsRoot);\n    tilemapObject.transform.localPosition = Vector3.zero;\n    var tilemap = tilemapObject.AddComponent<Tilemap>();\n    var tilemapRenderer = tilemapObject.AddComponent<TilemapRenderer>();\n    tilemapRenderer.sortingOrder = 20;\n\n    // Assign special layer\n    var mapLayer = LayerMask.NameToLayer(DeadCellsGameManager.LevelMapLayer);\n    tilemapObject.layer = mapLayer;\n\n    // Copy background tiles\n    CopyTilesToLevelMap(level, new [] {"Background", "Other 1"}, tilemap, LevelMapBackgroundTile);\n\n    // Copy wall background tiles\n    CopyTilesToLevelMap(level, new [] {"Background"}, tilemap, LevelMapWallBackgroundTile, x => x == WallTile);\n\n    // Copy platforms tiles\n    CopyTilesToLevelMap(level, new [] {"Platforms"}, tilemap, LevelMapPlatformTile);\n\n    // Copy wall tiles\n    CopyTilesToLevelMap(level, new [] {"Walls"}, tilemap, LevelMapWallTile);\n}\n')),Object(o.b)("p",null,"The last part of the setup is to create a camera the displays only the level map tilemap layer. To achieve that, we assign a special layer to the tilemap and then set the culling mask. We also added a simple camera control that reacts to players pressing a button and toggles between the default view and the level map view."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," For the level map to work, you need to add a layer called ",Object(o.b)("strong",{parentName:"p"},"LevelMap"),". Unfortunately, it is impossible to do that from a script.")),Object(o.b)("h3",{id:"results"},"Results"),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/underground/result1_ingame.png",caption:"Example result - ingame view",mdxType:"Image"}),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/underground/result1.png",caption:"Example result - level map view",mdxType:"Image"}),Object(o.b)(l.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/underground/result2.png",caption:"Example result",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/underground/result3.png",caption:"Example result",mdxType:"GalleryImage"})),Object(o.b)("h2",{id:"rooftop-level"},"Rooftop level"),Object(o.b)("p",null,"The second level that we try to implement is a little bit different. It is inspired by the Ramparts level from Dead Cells. Instead of being underground, it takes places on the ramparts of the prison. We will have to combine two types of rooms - rooms that are on the roofs of towers and rooms that are inside towers."),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/original_ramparts.png",caption:"Ramparts level map from Dead Cells",mdxType:"Image"}),Object(o.b)("h3",{id:"towers"},"Towers"),Object(o.b)("p",null,"The first challenge of this level is how to generate the top layer of rooms in a way that it looks like there are towers that are divided by gaps. Our goal si to create a set of room templates that can be connected only horizontally and then implement a post-processing logic that will create the illusion of towers."),Object(o.b)("h4",{id:"room-templates-1"},"Room templates"),Object(o.b)(l.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/rooftop/entrance.png",caption:"Entrance",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/rooftop/exit.png",caption:"Exit",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/rooftop/outside1.png",caption:"Normal",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/rooftop/outside3.png",caption:"Normal",mdxType:"GalleryImage"})),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," It is ",Object(o.b)("strong",{parentName:"p"},"very important")," that we do not use layers with colliders if it is not neccessary. For example, you can see that only the outline tiles of walls have a collider and other walls are in the background layer without a collider. The reason for that is that when the generator assembles the level and copies tiles to shared tilemaps, Unity has to recompute collider shapes which can significantly decrease the performance if there are too tiles with colliders.")),Object(o.b)("h4",{id:"level-graph-1"},"Level graph"),Object(o.b)("p",null,"The first version of the level graph contains the top layer of rooms, i.e. only the rooms that are on top of the towers."),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/rooftop_level_graph_simple.png",caption:"Level graph with only the top layer of rooms",mdxType:"Image"}),Object(o.b)("h4",{id:"intermediate-results"},"Intermediate results"),Object(o.b)("p",null,"Below we can see how the level looks now. All the rooms are connected only horizontally because there are no vertical door positions."),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/rooftop_result_towers_intermediate.png",caption:"Intermediate result",mdxType:"Image"}),Object(o.b)("h4",{id:"walls"},"Walls"),Object(o.b)("p",null,"The last step is to add wall tiles under individual rooms so that the level looks like there are towers. This can be done with a custom post-processing logic that goes through all the rooms and for each used room template it finds the bottom-most layer of tiles. For each tile position in this layer, if it contains a non-null tile, we add a column of wall tiles under it."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"private void AddWallsUnderRoom(RoomInstance roomInstance)\n{\n    // Get the room template and all the used tiles\n    var roomTemplate = roomInstance.RoomTemplateInstance;\n    var tilemaps = RoomTemplateUtils.GetTilemaps(roomTemplate);\n    var usedTiles = RoomTemplatesLoader.GetUsedTiles(tilemaps).ToList();\n\n    // Find the minimum y coordinate of all the tiles and use it to find the bottom layer of tiles\n    var minY = usedTiles.Min(x => x.y);\n    var bottomLayerTiles = usedTiles.Where(x => x.y == minY).ToList();\n\n    foreach (var pos in bottomLayerTiles)\n    {\n        var tilemap = backgroundTilemap;\n\n        // Use the walls tilemap only if the collider is really needed\n        // That means we only use it if the tile is the border tile of a tower\n        var leftTilePos = pos + Vector3Int.left;\n        var rightTilePos = pos + Vector3Int.right;\n        if (wallsTilemap.GetTile(pos) != null && !(bottomLayerTiles.Contains(leftTilePos) && bottomLayerTiles.Contains(rightTilePos)))\n        {\n            tilemap = wallsTilemap;\n        }\n\n        // Add tiles under this position\n        for (int i = 1; i <= WallDepth; i++)\n        {\n            var wallPosition = roomInstance.Position + pos + Vector3Int.down * i;\n            tilemap.SetTile(wallPosition, WallTile);\n        }\n    }\n}\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Once again, it is ",Object(o.b)("strong",{parentName:"p"},"very important")," that we use collider for as few tiles as possible. We are adding many tiles and do not want to spend too much time recomputing colliders.")),Object(o.b)("p",null,"One problem that we have to solve is when we should call this post-processing logic. In the next section, we will add rooms inside the towers. But if we draw walls after all the rooms are drawn, we will overwrite all the rooms that are inside the tower. We would have to do some checks to avoid that. An easier solution is to call our logic after shared tilemaps are initialized but before any rooms are drawn. That means that we first draw the walls and if there is a room occupying the same tiles, the room overwrites the walls, which is what we want. To achieve that, we use ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../generators/post-process#pro-priority-callbacks"}),"Priority callbacks")," and register our logic right after shared tilemaps are initialized."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"public override void RegisterCallbacks(PriorityCallbacks<DungeonGeneratorPostProcessCallback> callbacks)\n{\n    if (AddWalls)\n    {\n        callbacks.RegisterCallbackAfter(PostProcessPriorities.InitializeSharedTilemaps, AddWallsUnderRooms);\n    }\n}\n")),Object(o.b)("p",null,"The resulting level can be seen below:"),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/rooftop_result_towers.png",caption:"Towers",mdxType:"Image"}),Object(o.b)("h3",{id:"rooms-inside-towers"},"Rooms inside towers"),Object(o.b)("p",null,"The second challenge is how to make sure that if we add rooms inside the towers, they will not cross the boundary of the tower. Unfortunately, it is currently not possible to add such constraints to the generator, so we have to be creative with how we design our room templates."),Object(o.b)("h4",{id:"room-templates-2"},"Room templates"),Object(o.b)("p",null,"We will design our room templates in a way that it is not possible for them to cross the borders of towers. To do so, we will place all the doors near to the center of the room."),Object(o.b)(l.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/rooftop/inside1.png",caption:"Inside room",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/rooftop/inside2.png",caption:"Inside room",mdxType:"GalleryImage"})),Object(o.b)("p",null,"And we also have to create rooms templates that have some vertical door positions so that we can connect the inside rooms to them."),Object(o.b)(l.a,{cols:2,fixedHeight:!0,mdxType:"Gallery"},Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/rooftop/outteleport1.png",caption:"Inside room",mdxType:"GalleryImage"}),Object(o.b)(l.b,{src:"img/v2/examples/dead_cells/rooftop/outteleport2.png",caption:"Inside room",mdxType:"GalleryImage"})),Object(o.b)("h4",{id:"level-graph-2"},"Level graph"),Object(o.b)("p",null,"Now we can add these inside rooms to the level graph."),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/rooftop_level_graph.png",caption:"Level graph with all the rooms",mdxType:"Image"}),Object(o.b)("h3",{id:"results-1"},"Results"),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/rooftop_result1_ingame.png",caption:"Example result - ingame view",mdxType:"Image"}),Object(o.b)(l.c,{src:"img/v2/examples/dead_cells/rooftop_result1.png",caption:"Example result - level map view",mdxType:"Image"}))}d.isMDXComponent=!0},228:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?r.a.createElement(h,i(i({ref:t},c),{},{components:n})):r.a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},229:function(e,t,n){"use strict";var a=n(0),r=n(34);t.a=function(){return Object(a.useContext)(r.a)}},230:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var a=n(229);function r(e){const{siteConfig:t}=Object(a.a)(),{baseUrl:n="/"}=t||{};if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?n+e.slice(1):n+e}},231:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return c})),n.d(t,"c",(function(){return m}));var a=n(2),r=n(0),o=n.n(r),l=n(230);const i=e=>o.a.createElement("div",{style:{display:"inline-block",margin:2,overflow:"hidden",position:"relative",width:`calc(${100/e.cols}% - 4px)`,verticalAlign:"top"}},e.children),s=e=>o.a.createElement("div",{style:{fontSize:"0px",margin:"20px 0"}},o.a.Children.map(e.children,t=>o.a.cloneElement(t,{cols:e.cols||4,fixedHeight:e.fixedHeight}))),c=e=>o.a.createElement(i,{cols:e.cols},o.a.createElement("a",{href:Object(l.a)(e.src),target:"_blank"},o.a.createElement("img",{src:Object(l.a)(e.src),alt:"result",style:{height:!0===e.fixedHeight?800/e.cols+"px":"auto",objectFit:!0===e.fixedHeight?"cover":"initial"}})),void 0!==e.caption&&o.a.createElement(p,null,e.caption)),p=e=>o.a.createElement("div",{style:{fontSize:16,fontStyle:"italic",textAlign:"center",margin:"10px 0px 15px"}},e.children),m=e=>{const{src:t,caption:n,...r}=e;return o.a.createElement("div",{style:{textAlign:"center"}},o.a.createElement("img",Object(a.a)({src:Object(l.a)(e.src)},r)),void 0!==e.caption&&o.a.createElement(p,null,e.caption))}},232:function(e,t,n){"use strict";var a,r,o=n(259),l=RegExp.prototype.exec,i=String.prototype.replace,s=l,c=(a=/a/,r=/b*/g,l.call(a,"a"),l.call(r,"a"),0!==a.lastIndex||0!==r.lastIndex),p=void 0!==/()??/.exec("")[1];(c||p)&&(s=function(e){var t,n,a,r,s=this;return p&&(n=new RegExp("^"+s.source+"$(?!\\s)",o.call(s))),c&&(t=s.lastIndex),a=l.call(s,e),c&&a&&(s.lastIndex=s.global?a.index+a[0].length:t),p&&a&&a.length>1&&i.call(a[0],n,(function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(a[r]=void 0)})),a}),e.exports=s},233:function(e,t,n){"use strict";var a=n(0),r=n.n(a),o=n(20),l=n(234),i=n(37),s=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(a=Object.getOwnPropertySymbols(e);r<a.length;r++)t.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(n[a[r]]=e[a[r]])}return n};t.a=function(e){var{isNavLink:t}=e,n=s(e,["isNavLink"]);const{to:c,href:p}=n,m=c||p,d=Object(l.a)(m),u=Object(a.useRef)(!1),h=t?o.c:o.b,b=i.a.canUseIntersectionObserver;let f;return Object(a.useEffect)(()=>(!b&&d&&window.docusaurus.prefetch(m),()=>{b&&f&&f.disconnect()}),[m,b,d]),m&&d&&!m.startsWith("#")?r.a.createElement(h,Object.assign({},n,{onMouseEnter:()=>{u.current||(window.docusaurus.preload(m),u.current=!0)},innerRef:e=>{var t,n;b&&e&&d&&(t=e,n=()=>{window.docusaurus.prefetch(m)},f=new window.IntersectionObserver(e=>{e.forEach(e=>{t===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(f.unobserve(t),f.disconnect(),n())})}),f.observe(t))},to:m})):r.a.createElement("a",Object.assign({href:m},!d&&{target:"_blank",rel:"noopener noreferrer"},n))}},234:function(e,t,n){"use strict";function a(e){return!1===/^(https?:|\/\/|mailto:|tel:)/.test(e)}n.d(t,"a",(function(){return a}))},235:function(e,t,n){var a=n(19),r=n(53),o=n(11)("match");e.exports=function(e){var t;return a(e)&&(void 0!==(t=e[o])?!!t:"RegExp"==r(e))}},237:function(e,t,n){"use strict";n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return p}));n(238),n(239),n(241),n(245),n(250),n(253);var a=n(0),r=n.n(a),o=n(233),l=[{id:"outline-override",url:"../basics/room-templates#outline-override",name:"Outline override",usages:[{id:"corridors",description:"Outline override is used to properly handle corridors"}]},{id:"custom-rooms-and-connections",url:"../basics/level-graphs#pro-custom-rooms-and-connections",name:"Custom rooms",usages:[{id:"room-type",description:"The definition of rooms is enhanced with a custom type"}]},{id:"custom-post-processing",url:"../generators/post-process#custom-post-processing",name:"Custom post-processing",usages:[{id:"enemies",description:"A custom post-processing task is used to spawn enemies after a level is generated"},{id:"player-spawn",description:"Move the player to the spawn position of the level"}]}],i=[{id:"example-1",name:"Example 1",url:"../examples/example-1",features:[{id:"custom-post-processing",usage:"enemies",anchor:"enemies"}]},{id:"example-2",name:"Example 2",url:"../examples/example-2",features:[{id:"outline-override",usage:"corridors",anchor:"vertical-corridors"}]},{id:"dead-cells",name:"Dead Cells",url:"../examples/dead-cells",features:[{id:"custom-post-processing",usage:"enemies",anchor:"enemies"},{id:"custom-post-processing",usage:"player-spawn",anchor:"spawn-position"},{id:"custom-rooms-and-connections",usage:"room-type",anchor:"custom-room-and-connection-types"}]}];function s(e){if("undefined"!=typeof window){var t=window.location.href.split("/");t[t.length-1].startsWith("#")&&(e="../"+e)}else e="../"+e;return e}var c=function(e){var t=l.find((function(t){return t.id===e.id})).usages.map((function(e){return Object.assign({},e,{examples:[]})}));return i.forEach((function(n){n.features.forEach((function(a){a.id===e.id&&t.find((function(e){return e.id===a.usage})).examples.push({example:n,feature:a})}))})),console.log(t),r.a.createElement("div",{className:"featureUsage"},r.a.createElement("div",{className:"featureUsage__title"},"Where is this feature used?"),r.a.createElement("div",{className:"featureUsage__description"},"Below is the list of examples/tutorials where we use this feature. Feel free to check them out if you're not sure how something works or if you just want to see this feature used in action."),r.a.createElement("table",null,r.a.createElement("tbody",null,t.map((function(e,t){return r.a.createElement("tr",{key:t},r.a.createElement("td",null,e.examples.map((function(e,t){return r.a.createElement("span",null,t?", ":"",r.a.createElement(o.a,{to:s(e.example.url+"#"+e.feature.anchor)},e.example.name))}))),r.a.createElement("td",null,e.description))})))))},p=function(e){var t=i.find((function(t){return t.id===e.id})),n=[];return t.features.forEach((function(e){var t=l.find((function(t){return t.id===e.id})),a=t.usages.find((function(t){return t.id===e.usage}));n.push(Object.assign({},e,{feature:t,featureUsage:a}))})),r.a.createElement("div",{className:"featureUsage"},r.a.createElement("div",{className:"featureUsage__title"},"List of used features"),r.a.createElement("div",{className:"featureUsage__description"},"Below is a list of features that are used in this example."),r.a.createElement("table",null,r.a.createElement("tbody",null,n.map((function(e,t){return r.a.createElement("tr",{key:t},r.a.createElement("td",null,r.a.createElement(o.a,{to:e.feature.url},e.feature.name)),r.a.createElement("td",null,e.featureUsage.description))})))))}},238:function(e,t,n){var a=n(21).f,r=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in r||n(12)&&a(r,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(e){return""}}})},239:function(e,t,n){"use strict";n(240)("anchor",(function(e){return function(t){return e(this,"a","name",t)}}))},240:function(e,t,n){var a=n(52),r=n(35),o=n(36),l=/"/g,i=function(e,t,n,a){var r=String(o(e)),i="<"+t;return""!==n&&(i+=" "+n+'="'+String(a).replace(l,"&quot;")+'"'),i+">"+r+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(i),a(a.P+a.F*r((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}},241:function(e,t,n){var a=n(52);a(a.S+a.F,"Object",{assign:n(242)})},242:function(e,t,n){"use strict";var a=n(12),r=n(38),o=n(243),l=n(244),i=n(56),s=n(55),c=Object.assign;e.exports=!c||n(35)((function(){var e={},t={},n=Symbol(),a="abcdefghijklmnopqrst";return e[n]=7,a.split("").forEach((function(e){t[e]=e})),7!=c({},e)[n]||Object.keys(c({},t)).join("")!=a}))?function(e,t){for(var n=i(e),c=arguments.length,p=1,m=o.f,d=l.f;c>p;)for(var u,h=s(arguments[p++]),b=m?r(h).concat(m(h)):r(h),f=b.length,g=0;f>g;)u=b[g++],a&&!d.call(h,u)||(n[u]=h[u]);return n}:c},243:function(e,t){t.f=Object.getOwnPropertySymbols},244:function(e,t){t.f={}.propertyIsEnumerable},245:function(e,t,n){"use strict";var a=n(52),r=n(246)(5),o=!0;"find"in[]&&Array(1).find((function(){o=!1})),a(a.P+a.F*o,"Array",{find:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}}),n(57)("find")},246:function(e,t,n){var a=n(58),r=n(55),o=n(56),l=n(54),i=n(247);e.exports=function(e,t){var n=1==e,s=2==e,c=3==e,p=4==e,m=6==e,d=5==e||m,u=t||i;return function(t,i,h){for(var b,f,g=o(t),v=r(g),y=a(i,h,3),w=l(v.length),O=0,x=n?u(t,w):s?u(t,0):void 0;w>O;O++)if((d||O in v)&&(f=y(b=v[O],O,g),e))if(n)x[O]=f;else if(f)switch(e){case 3:return!0;case 5:return b;case 6:return O;case 2:x.push(b)}else if(p)return!1;return m?-1:c||p?p:x}}},247:function(e,t,n){var a=n(248);e.exports=function(e,t){return new(a(e))(t)}},248:function(e,t,n){var a=n(19),r=n(249),o=n(11)("species");e.exports=function(e){var t;return r(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!r(t.prototype)||(t=void 0),a(t)&&null===(t=t[o])&&(t=void 0)),void 0===t?Array:t}},249:function(e,t,n){var a=n(53);e.exports=Array.isArray||function(e){return"Array"==a(e)}},250:function(e,t,n){"use strict";var a=n(52),r=n(54),o=n(251),l="".startsWith;a(a.P+a.F*n(252)("startsWith"),"String",{startsWith:function(e){var t=o(this,e,"startsWith"),n=r(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),a=String(e);return l?l.call(t,a,n):t.slice(n,n+a.length)===a}})},251:function(e,t,n){var a=n(235),r=n(36);e.exports=function(e,t,n){if(a(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(r(e))}},252:function(e,t,n){var a=n(11)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[a]=!1,!"/./"[e](t)}catch(r){}}return!0}},253:function(e,t,n){"use strict";var a=n(235),r=n(18),o=n(254),l=n(255),i=n(54),s=n(257),c=n(232),p=n(35),m=Math.min,d=[].push,u="length",h=!p((function(){RegExp(4294967295,"y")}));n(260)("split",2,(function(e,t,n,p){var b;return b="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[u]||2!="ab".split(/(?:ab)*/)[u]||4!=".".split(/(.?)(.?)/)[u]||".".split(/()()/)[u]>1||"".split(/.?/)[u]?function(e,t){var r=String(this);if(void 0===e&&0===t)return[];if(!a(e))return n.call(r,e,t);for(var o,l,i,s=[],p=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),m=0,h=void 0===t?4294967295:t>>>0,b=new RegExp(e.source,p+"g");(o=c.call(b,r))&&!((l=b.lastIndex)>m&&(s.push(r.slice(m,o.index)),o[u]>1&&o.index<r[u]&&d.apply(s,o.slice(1)),i=o[0][u],m=l,s[u]>=h));)b.lastIndex===o.index&&b.lastIndex++;return m===r[u]?!i&&b.test("")||s.push(""):s.push(r.slice(m)),s[u]>h?s.slice(0,h):s}:"0".split(void 0,0)[u]?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,a){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r,a):b.call(String(r),n,a)},function(e,t){var a=p(b,e,this,t,b!==n);if(a.done)return a.value;var c=r(e),d=String(this),u=o(c,RegExp),f=c.unicode,g=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(h?"y":"g"),v=new u(h?c:"^(?:"+c.source+")",g),y=void 0===t?4294967295:t>>>0;if(0===y)return[];if(0===d.length)return null===s(v,d)?[d]:[];for(var w=0,O=0,x=[];O<d.length;){v.lastIndex=h?O:0;var j,T=s(v,h?d:d.slice(O));if(null===T||(j=m(i(v.lastIndex+(h?0:O)),d.length))===w)O=l(d,O,f);else{if(x.push(d.slice(w,O)),x.length===y)return x;for(var I=1;I<=T.length-1;I++)if(x.push(T[I]),x.length===y)return x;O=w=j}}return x.push(d.slice(w)),x}]}))},254:function(e,t,n){var a=n(18),r=n(59),o=n(11)("species");e.exports=function(e,t){var n,l=a(e).constructor;return void 0===l||null==(n=a(l)[o])?t:r(n)}},255:function(e,t,n){"use strict";var a=n(256)(!0);e.exports=function(e,t,n){return t+(n?a(e,t).length:1)}},256:function(e,t,n){var a=n(39),r=n(36);e.exports=function(e){return function(t,n){var o,l,i=String(r(t)),s=a(n),c=i.length;return s<0||s>=c?e?"":void 0:(o=i.charCodeAt(s))<55296||o>56319||s+1===c||(l=i.charCodeAt(s+1))<56320||l>57343?e?i.charAt(s):o:e?i.slice(s,s+2):l-56320+(o-55296<<10)+65536}}},257:function(e,t,n){"use strict";var a=n(258),r=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var o=n.call(e,t);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==a(e))throw new TypeError("RegExp#exec called on incompatible receiver");return r.call(e,t)}},258:function(e,t,n){var a=n(53),r=n(11)("toStringTag"),o="Arguments"==a(function(){return arguments}());e.exports=function(e){var t,n,l;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=Object(e),r))?n:o?a(t):"Object"==(l=a(t))&&"function"==typeof t.callee?"Arguments":l}},259:function(e,t,n){"use strict";var a=n(18);e.exports=function(){var e=a(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},260:function(e,t,n){"use strict";n(261);var a=n(22),r=n(8),o=n(35),l=n(36),i=n(11),s=n(232),c=i("species"),p=!o((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),m=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var d=i(e),u=!o((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),h=u?!o((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[c]=function(){return n}),n[d](""),!t})):void 0;if(!u||!h||"replace"===e&&!p||"split"===e&&!m){var b=/./[d],f=n(l,d,""[e],(function(e,t,n,a,r){return t.exec===s?u&&!r?{done:!0,value:b.call(t,n,a)}:{done:!0,value:e.call(n,t,a)}:{done:!1}})),g=f[0],v=f[1];a(String.prototype,e,g),r(RegExp.prototype,d,2==t?function(e,t){return v.call(e,this,t)}:function(e){return v.call(e,this)})}}},261:function(e,t,n){"use strict";var a=n(232);n(52)({target:"RegExp",proto:!0,forced:a!==/./.exec},{exec:a})}}]);